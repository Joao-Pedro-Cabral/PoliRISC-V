00110111 // lui  sp,4096     ; ram base address 
00000001
00000000
00000001
00110111 // lui  s0,65555    ; uart_0 base address
00110100
00000001
00010000
00110111 // lui  x28,112     ; receive watermark level
00001110
00000111
00000000
00010011 // ori  x28,x28,1   ; rxen
01101110
00011110
00000000
00100011 // sw   x28,12(s0)  ; configuring receive control register
00100110
11000100
00000001
00010011 // andi x28,x28,-3  ; {nstop,txen}
01111110
11011110
11111111
00100011 // sw   x28,8(s0)   ; configuring transmit control register
00100100
11000100
00000001
00010011 // ori  x28,x28,2   ; {txwm, rxwm}
01101110
00101110
00000000
00100011 // sw   x28,16(s0)  ; configuring interrupt enable register
00101000
11000100
00000001
00110011 // or   x28,x0,x0   ; infinite loop initialization
01101110
00000000
00000000
10000011 // lw   x29,0(s0)   ; infinite loop
00101110
00000100
00000000
10010011 // srli x29,x29,31  ; tx fifo full
11011110
11111110
00000001
11100011 // bne  x29,x0,-8   ; if fifo full, check again
10011100
00001110
11111110
00100011 // sw   x28,0(s0)   ; store word
00100000
11000100
00000001
00110111 // lui  x30,-524288 ; bit mask for rx fifo's empty flag
00001111
00000000
10000000
10000011 // lw   x29,4(s0)   ; read rx fifo
00101110
01000100
00000000
10110011 // and  x31,x29,x30 ; apply mask
11111111
11101110
00000001
11100011 // bne  x31,x0,-8   ; if fifo empty, check again
10011100
00001111
11111110
00110011 // sub  x6,x28,x29  ; if equal to 0, value sent and received are the same
00000011
11011110
01000001
00100011 // sw   x6,0(sp)    ; stores result in RAM
00100000
01100001
00000000
00010011 // addi x28,x28,1   ; loop increment
00001110
00011110
00000000
01101111 // jal  x0,-44      ; loop
11110000
01011111
11111101
